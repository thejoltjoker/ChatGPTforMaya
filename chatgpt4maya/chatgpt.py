import json
import logging
import os
import re
import sys
import urllib.request
from pathlib import Path
from pprint import pprint
import logging

from chatgpt4maya import config
from chatgpt4maya.config import Config

logging.basicConfig(level=logging.INFO, format=config.LOG_FORMAT)
# Load .env during development
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    pass

config = Config()
sys.path.insert(0, str(Path(config.get('OpenAI', 'OpenAILibraryPath')).resolve()))

# Import openai
try:
    import openai

    logging.info('Imported openai')
except Exception as e:
    logging.error(e)
    logging.error('openai package could not be imported')
    openai = None


class ChatGPT:
    def __init__(self, api_key=None):

        # Get api key
        api_key = api_key if api_key else os.getenv('OPENAI_API_KEY')
        if api_key:
            # Set api key
            openai.api_key = api_key
        else:
            logging.error('No api key given/found')
        self.model = 'gpt-3.5-turbo'
        self.system_message = {'role': 'system',
                               'content': 'Helpful assistant. '
                                          'Help with Autodesk Maya, python, mel, Maya expression.'}
        self.messages = [self.system_message]

    def _test_response(self):
        """Send a request to httpbin"""
        url = 'https://httpbin.org/json'
        logging.info(f'Sending request to {url}')
        res = urllib.request.urlopen(url)
        res_body = res.get()
        j = json.loads(res_body.decode("utf-8"))
        
        response_content = "Here's an example code to create a row of cubes using Python in Maya:\n\n```python\nimport maya.cmds as cmds\n\n# Set the number of cubes and the distance between them\nnum_cubes = 5\ndistance = 2\n\n# Create a loop to create and position the cubes\nfor i in range(num_cubes):\n    # Create a new cube\n    cube = cmds.polyCube()[0]\n    # Position the cube based on the index and distance\n    cmds.move(i * distance, 0, 0, cube)\n```\n\nThis code will create 5 cubes and position them in a row with a distance of 2 units between each cube. You can adjust the `num_cubes` and `distance` variables to create a different number of cubes or change the distance between them."
        j = {'choices': [{'finish_reason': 'stop', 'index': 0, 'message': {
            'content': "Sure, here's an example code that creates 5 cubes and positions them in a row:\n\n```\nimport maya.cmds as cmds\n\n# Create 5 cubes\nnum_cubes = 5\ncube_size = 2\ncubes = []\nfor i in range(num_cubes):\n    cube = cmds.polyCube(w=cube_size, h=cube_size, d=cube_size)[0]\n    cubes.append(cube)\n\n# Position cubes in a row\nspacing = 1.5\nfor i, cube in enumerate(cubes):\n    cmds.move(i * (cube_size + spacing), 0, 0, cube)\n```\n\nThis code first creates 5 cubes with a size of 2 units each. Then, it positions them in a row with a spacing of 1.5 units between each cube. The `enumerate` function is used to get the index of each cube in the `cubes` list, which is then used to calculate the x position of each cube.",
            'role': 'assistant'}}], 'created': 1681585530, 'id': 'chatcmpl-75fVCMQ3n9MCYc4W3gKVaH1nwdR5S',
             'model': 'gpt-3.5-turbo-0301', 'object': 'chat.completion',
             'usage': {'completion_tokens': 204, 'prompt_tokens': 40, 'total_tokens': 244}}
        j['choices'][0]['message']['content'] = response_content
        return j

    def _get_response(self):
        """
        Generate a chat response using the GPT-3.5 model and the previous messages.

        Returns:
            dict: The response generated by the GPT-3.5 model.
        """
        response = {}
        try:
            # Create a chat completion using OpenAI's API
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=self.messages,
                temperature=0,
                max_tokens=2048,
                top_p=1
            )
            # Log the response for debugging purposes
            logging.debug(response)

        except Exception as e:
            # Log any exceptions that occur during the chat completion process
            logging.error(e)

        return response

    def _append_message(self, content, role='user'):
        self.messages.append({'role': 'user', 'content': content})
        return self.messages

    def reset_conversation(self):
        self.messages = [self.system_message]
        return self.messages

    def send_message(self, message):
        # Append user message
        self._append_message(message)

        # Get response from api
        # response = self._test_response() # mock api for testing
        response = self._get_response()

        # Get the message content
        response_message = response['choices'][0]['message']

        # Append response message
        self._append_message(**response_message)

        return response

    def hello_world(self):
        return 'Hello world'


if __name__ == '__main__':
    api = ChatGPT()
    api._append_message('create a cube and position them in a row using python')
    pprint(api._get_response())
